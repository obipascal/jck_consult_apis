<?php

namespace App\Http\Controllers\Settings;

use App\Http\Config\RESTResponse;
use App\Http\Controllers\Controller;
use App\Http\Handlers\Handlers;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;

class SettingsApi extends Controller
{
	use RESTResponse;
	/**
	 * Display a listing of the resource.
	 */
	public function index()
	{
		try {
			/* Run validation  */
			$validator = Validator::make(request()->only(["perPage"]), [
				"perPage" => ["bail", "numeric", "nullable"],
			]);

			/* Check if any validation fails */
			if ($validator->fails()) {
				/* If fails return the validation error message  */
				return $this->terminateRequest("Validation Error", $this->getValidationMessages($validator));
			}
			/* Call the controller handlers to handle request logic */
			$settingsHandler = Handlers::Settings(request())->getSettings();
			$faqsHandler = Handlers::Settings(request())->getFAQs();

			/* Determine handler operation status  */
			if (!$settingsHandler->STATE) {
				/* If operation didn't succeed return the error that was generated by the operation */
				return $this->terminateRequest($settingsHandler->ERROR, $settingsHandler->RESPONSE, $settingsHandler->CODE);
			}

			/* Determine handler operation status  */
			if (!$faqsHandler->STATE) {
				/* If operation didn't succeed return the error that was generated by the operation */
				return $this->terminateRequest($faqsHandler->ERROR, $faqsHandler->RESPONSE, $faqsHandler->CODE);
			}

			$response["settings"] = $settingsHandler->RESPONSE;
			$response["faq"] = $faqsHandler->RESPONSE;

			/* Finally all went well return the response to caller/client */
			return $this->sendResponse($response, $settingsHandler->MESSAGE, $settingsHandler->STATE, $settingsHandler->CODE);
		} catch (\Exception $th) {
			Log::error($th->getMessage(), ["file" => $th->getFile(), "line" => $th->getLine()]);

			return $this->terminateRequest("ERROR", $this->RESPONSE ?? $th->getMessage(), 500);
		}
	}

	/**
	 * Store a newly created resource in storage.
	 */
	public function store(Request $request)
	{
		try {
			/* Run validation  */
			$validator = Validator::make($request->all(), [
				"name" => ["bail", "string", "required"],
				"desc" => ["bail", "string", "required"],
				"about" => ["bail", "string", "required"],
				"phone_number" => ["bail", "numeric", "required"],
				"email" => ["bail", "email", "required", "unique:users,email"],
				"line_address" => ["bail", "string", "required"],
				"facebook_handle" => ["bail", "string", "nullable"],
				"twitter_handle" => ["bail", "string", "nullable"],
				"whatsapp_handle" => ["bail", "string", "nullable"],
				"instagram_handle" => ["bail", "string", "nullable"],
				"linkedin_handle" => ["bail", "string", "nullable"],
				"site_logo" => ["bail", "file", "nullable", "mimes:png,jpg,jpeg,svg"],
			]);

			/* Check if any validation fails */
			if ($validator->fails()) {
				/* If fails return the validation error message  */
				return $this->terminateRequest("Validation Error", $this->getValidationMessages($validator));
			}
			/* Call the controller handlers to handle request logic */
			$handler = Handlers::Settings($request)->saveSettings();

			/* Determine handler operation status  */
			if (!$handler->STATE) {
				/* If operation didn't succeed return the error that was generated by the operation */
				return $this->terminateRequest($handler->ERROR, $handler->RESPONSE, $handler->CODE);
			}

			/* Finally all went well return the response to caller/client */
			return $this->sendResponse($handler->RESPONSE, $handler->MESSAGE, $handler->STATE, $handler->CODE);
		} catch (\Exception $th) {
			Log::error($th->getMessage(), ["file" => $th->getFile(), "line" => $th->getLine()]);

			return $this->terminateRequest("ERROR", $this->RESPONSE ?? $th->getMessage(), 500);
		}
	}

	/**
	 * Display the specified resource.
	 */
	public function show(string $id)
	{
		try {
			/* Run validation  */
			$validator = Validator::make(
				["site_id" => $id],
				[
					"site_id" => ["bail", "numeric", "required", "exists:site_settings,site_id"],
				]
			);

			/* Check if any validation fails */
			if ($validator->fails()) {
				/* If fails return the validation error message  */
				return $this->terminateRequest("Validation Error", $this->getValidationMessages($validator));
			}

			/* Call the controller handlers to handle request logic */
			$handler = Handlers::Settings(request())->getSetting($id);

			/* Determine handler operation status  */
			if (!$handler->STATE) {
				/* If operation didn't succeed return the error that was generated by the operation */
				return $this->terminateRequest($handler->ERROR, $handler->RESPONSE, $handler->CODE);
			}

			/* Finally all went well return the response to caller/client */
			return $this->sendResponse($handler->RESPONSE, $handler->MESSAGE, $handler->STATE, $handler->CODE);
		} catch (\Exception $th) {
			Log::error($th->getMessage(), ["file" => $th->getFile(), "line" => $th->getLine()]);

			return $this->terminateRequest("ERROR", $this->RESPONSE ?? $th->getMessage(), 500);
		}
	}

	/**
	 * Update the specified resource in storage.
	 */
	public function update(Request $request, string $id)
	{
		try {
			/* Run validation  */
			$validator = Validator::make(
				["site_id" => $id, ...$request->all()],
				[
					"site_id" => ["bail", "numeric", "required", "exists:site_settings,site_id"],
					"name" => ["bail", "string", "required"],
					"desc" => ["bail", "string", "required"],
					"about" => ["bail", "string", "required"],
					"phone_number" => ["bail", "numeric", "required"],
					"email" => ["bail", "email", "required", "unique:users,email"],
					"line_address" => ["bail", "string", "required"],
					"facebook_handle" => ["bail", "string", "nullable"],
					"twitter_handle" => ["bail", "string", "nullable"],
					"whatsapp_handle" => ["bail", "string", "nullable"],
					"instagram_handle" => ["bail", "string", "nullable"],
					"linkedin_handle" => ["bail", "string", "nullable"],
					"site_logo" => ["bail", "file", "nullable", "mimes:png,jpg,jpeg,svg"],
				]
			);

			/* Check if any validation fails */
			if ($validator->fails()) {
				/* If fails return the validation error message  */
				return $this->terminateRequest("Validation Error", $this->getValidationMessages($validator));
			}
			/* Call the controller handlers to handle request logic */
			$handler = Handlers::Settings($request)->saveSettings();

			/* Determine handler operation status  */
			if (!$handler->STATE) {
				/* If operation didn't succeed return the error that was generated by the operation */
				return $this->terminateRequest($handler->ERROR, $handler->RESPONSE, $handler->CODE);
			}

			/* Finally all went well return the response to caller/client */
			return $this->sendResponse($handler->RESPONSE, $handler->MESSAGE, $handler->STATE, $handler->CODE);
		} catch (\Exception $th) {
			Log::error($th->getMessage(), ["file" => $th->getFile(), "line" => $th->getLine()]);

			return $this->terminateRequest("ERROR", $this->RESPONSE ?? $th->getMessage(), 500);
		}
	}

	//  ------------------> [FAQs]

	/**
	 * Store a newly created resource in storage.
	 */
	public function storeFAQ(Request $request)
	{
		try {
			/* Run validation  */
			$validator = Validator::make($request->all(), [
				"title" => ["bail", "string", "required"],
				"content" => ["bail", "string", "required"],
			]);

			/* Check if any validation fails */
			if ($validator->fails()) {
				/* If fails return the validation error message  */
				return $this->terminateRequest("Validation Error", $this->getValidationMessages($validator));
			}
			/* Call the controller handlers to handle request logic */
			$handler = Handlers::Settings($request)->createFQA();

			/* Determine handler operation status  */
			if (!$handler->STATE) {
				/* If operation didn't succeed return the error that was generated by the operation */
				return $this->terminateRequest($handler->ERROR, $handler->RESPONSE, $handler->CODE);
			}

			/* Finally all went well return the response to caller/client */
			return $this->sendResponse($handler->RESPONSE, $handler->MESSAGE, $handler->STATE, $handler->CODE);
		} catch (\Exception $th) {
			Log::error($th->getMessage(), ["file" => $th->getFile(), "line" => $th->getLine()]);

			return $this->terminateRequest("ERROR", $this->RESPONSE ?? $th->getMessage(), 500);
		}
	}

	/**
	 * Update the specified resource in storage.
	 */
	public function updateFAQ(Request $request, string $id)
	{
		try {
			/* Run validation  */
			$validator = Validator::make(
				["faq_id" => $id, ...$request->all()],
				[
					"faq_id" => ["bail", "numeric", "required", "exists:f_a_qs,faq_id"],
					"title" => ["bail", "string", "required"],
					"content" => ["bail", "string", "required"],
				]
			);

			/* Check if any validation fails */
			if ($validator->fails()) {
				/* If fails return the validation error message  */
				return $this->terminateRequest("Validation Error", $this->getValidationMessages($validator));
			}
			/* Call the controller handlers to handle request logic */
			$handler = Handlers::Settings($request)->updateFAQ($id);

			/* Determine handler operation status  */
			if (!$handler->STATE) {
				/* If operation didn't succeed return the error that was generated by the operation */
				return $this->terminateRequest($handler->ERROR, $handler->RESPONSE, $handler->CODE);
			}

			/* Finally all went well return the response to caller/client */
			return $this->sendResponse($handler->RESPONSE, $handler->MESSAGE, $handler->STATE, $handler->CODE);
		} catch (\Exception $th) {
			Log::error($th->getMessage(), ["file" => $th->getFile(), "line" => $th->getLine()]);

			return $this->terminateRequest("ERROR", $this->RESPONSE ?? $th->getMessage(), 500);
		}
	}

	/**
	 * Display the specified resource.
	 */
	public function showFAQ(string $id)
	{
		try {
			/* Run validation  */
			$validator = Validator::make(
				["faq_id" => $id],
				[
					"faq_id" => ["bail", "numeric", "required", "exists:f_a_qs,faq_id"],
				]
			);

			/* Check if any validation fails */
			if ($validator->fails()) {
				/* If fails return the validation error message  */
				return $this->terminateRequest("Validation Error", $this->getValidationMessages($validator));
			}

			/* Call the controller handlers to handle request logic */
			$handler = Handlers::Settings(request())->getFAQ($id);

			/* Determine handler operation status  */
			if (!$handler->STATE) {
				/* If operation didn't succeed return the error that was generated by the operation */
				return $this->terminateRequest($handler->ERROR, $handler->RESPONSE, $handler->CODE);
			}

			/* Finally all went well return the response to caller/client */
			return $this->sendResponse($handler->RESPONSE, $handler->MESSAGE, $handler->STATE, $handler->CODE);
		} catch (\Exception $th) {
			Log::error($th->getMessage(), ["file" => $th->getFile(), "line" => $th->getLine()]);

			return $this->terminateRequest("ERROR", $this->RESPONSE ?? $th->getMessage(), 500);
		}
	}

	/**
	 * Display the specified resource.
	 */
	public function indexFAQ()
	{
		try {
			/* Run validation  */
			$validator = Validator::make(request()->only(["perPage"]), [
				"perPage" => ["bail", "numeric", "nullable"],
			]);

			/* Check if any validation fails */
			if ($validator->fails()) {
				/* If fails return the validation error message  */
				return $this->terminateRequest("Validation Error", $this->getValidationMessages($validator));
			}

			/* Call the controller handlers to handle request logic */
			$handler = Handlers::Settings(request())->getFAQs();

			/* Determine handler operation status  */
			if (!$handler->STATE) {
				/* If operation didn't succeed return the error that was generated by the operation */
				return $this->terminateRequest($handler->ERROR, $handler->RESPONSE, $handler->CODE);
			}

			/* Finally all went well return the response to caller/client */
			return $this->sendResponse($handler->RESPONSE, $handler->MESSAGE, $handler->STATE, $handler->CODE);
		} catch (\Exception $th) {
			Log::error($th->getMessage(), ["file" => $th->getFile(), "line" => $th->getLine()]);

			return $this->terminateRequest("ERROR", $this->RESPONSE ?? $th->getMessage(), 500);
		}
	}

	/**
	 * Display the specified resource.
	 */
	public function destroyFAQ(string $id)
	{
		try {
			/* Run validation  */
			$validator = Validator::make(
				["faq_id" => $id],
				[
					"faq_id" => ["bail", "numeric", "required", "exists:f_a_qs,faq_id"],
				]
			);

			/* Check if any validation fails */
			if ($validator->fails()) {
				/* If fails return the validation error message  */
				return $this->terminateRequest("Validation Error", $this->getValidationMessages($validator));
			}

			/* Call the controller handlers to handle request logic */
			$handler = Handlers::Settings(request())->deleteFAQ($id);

			/* Determine handler operation status  */
			if (!$handler->STATE) {
				/* If operation didn't succeed return the error that was generated by the operation */
				return $this->terminateRequest($handler->ERROR, $handler->RESPONSE, $handler->CODE);
			}

			/* Finally all went well return the response to caller/client */
			return $this->sendResponse($handler->RESPONSE, $handler->MESSAGE, $handler->STATE, $handler->CODE);
		} catch (\Exception $th) {
			Log::error($th->getMessage(), ["file" => $th->getFile(), "line" => $th->getLine()]);

			return $this->terminateRequest("ERROR", $this->RESPONSE ?? $th->getMessage(), 500);
		}
	}
}
